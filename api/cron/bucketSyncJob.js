import { 
  getActiveBuckets, 
  syncSingleBucket 
} from './syncService.js';

// ============== Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò ==============
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const formatDuration = (ms) => {
  const minutes = Math.floor(ms / 60000);
  const seconds = Math.floor((ms % 60000) / 1000);
  return minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
};


// ============== Î©îÏù∏ ÎèôÍ∏∞Ìôî ÏûëÏóÖ ==============
export const syncAllBuckets = async () => {
  const startTime = Date.now();
  const timestamp = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });
  
  console.log(`üîÑ [${timestamp}] Starting bucket synchronization...`);
  
  let totalBuckets = 0;
  let successCount = 0;
  let failCount = 0;
  let actionCounts = {
    UPDATED_PAYMENTS: 0,
    MARKED_AS_SUCCESS: 0,
    MARKED_AS_FAILED: 0,
    NO_CHANGES: 0
  };
  
  try {
    // 1. ÌôúÏÑ± Ï†ÅÍ∏àÌÜµ Ï°∞Ìöå
    const activeBuckets = await getActiveBuckets();
    totalBuckets = activeBuckets.length;
    
    console.log(`üìä Found ${totalBuckets} active buckets to sync`);
    
    if (totalBuckets === 0) {
      console.log('‚úÖ No active buckets to sync');
      return;
    }
    
    // 2. Î∞∞Ïπò Ï≤òÎ¶¨ ÏÑ§Ï†ï
    const BATCH_SIZE = 3;
    const BATCH_DELAY = 500; // 500ms
    
    // 3. Î∞∞ÏπòÎ≥Ñ Ï≤òÎ¶¨
    for (let i = 0; i < activeBuckets.length; i += BATCH_SIZE) {
      const batch = activeBuckets.slice(i, i + BATCH_SIZE);
      const batchNumber = Math.floor(i / BATCH_SIZE) + 1;
      const totalBatches = Math.ceil(activeBuckets.length / BATCH_SIZE);
      
      console.log(`üîÑ Processing batch ${batchNumber}/${totalBatches} (${batch.length} buckets)`);
      
      // Î∞∞Ïπò ÎÇ¥ Î≥ëÎ†¨ Ï≤òÎ¶¨
      const batchPromises = batch.map(bucket => syncSingleBucket(bucket));
      const batchResults = await Promise.allSettled(batchPromises);
      
      // Í≤∞Í≥º ÏßëÍ≥Ñ
      for (const result of batchResults) {
        if (result.status === 'fulfilled') {
          const syncResult = result.value;
          
          if (syncResult.success) {
            successCount++;
            actionCounts[syncResult.action] = (actionCounts[syncResult.action] || 0) + 1;
            
            // ÏÉÅÏÑ∏ Î°úÍ∑∏ Ï∂úÎ†•
            if (syncResult.action === 'UPDATED_PAYMENTS') {
              console.log(`  ‚úÖ Bucket ${syncResult.bucketId}: ${syncResult.changes.success}, ${syncResult.changes.fail}`);
            } else if (syncResult.action === 'MARKED_AS_SUCCESS') {
              console.log(`  üéâ Bucket ${syncResult.bucketId}: COMPLETED (${syncResult.reason})`);
            } else if (syncResult.action === 'MARKED_AS_FAILED') {
              console.log(`  ‚ùå Bucket ${syncResult.bucketId}: FAILED (${syncResult.reason})`);
            }
          } else {
            failCount++;
            console.log(`  ‚ùå Bucket ${syncResult.bucketId}: ERROR - ${syncResult.error}`);
          }
        } else {
          failCount++;
          console.log(`  üí• Batch processing error:`, result.reason);
        }
      }
      
      // Î∞∞Ïπò Í∞Ñ ÎåÄÍ∏∞ (ÎßàÏßÄÎßâ Î∞∞Ïπò Ï†úÏô∏)
      if (i + BATCH_SIZE < activeBuckets.length) {
        await sleep(BATCH_DELAY);
      }
    }
    
  } catch (error) {
    console.error('üí• Critical sync job error:', error);
    
  } finally {
    const duration = Date.now() - startTime;
    const endTime = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });
    
    console.log('\nüìà === Sync Results Summary ===');
    console.log(`üïê Started: ${timestamp}`);
    console.log(`üèÅ Finished: ${endTime}`);
    console.log(`‚è±Ô∏è  Duration: ${formatDuration(duration)}`);
    console.log(`üìä Total Buckets: ${totalBuckets}`);
    console.log(`‚úÖ Success: ${successCount}`);
    console.log(`‚ùå Failed: ${failCount}`);
    console.log(`üìù Actions:`);
    console.log(`   - Payment Updates: ${actionCounts.UPDATED_PAYMENTS}`);
    console.log(`   - Marked Success: ${actionCounts.MARKED_AS_SUCCESS}`);
    console.log(`   - Marked Failed: ${actionCounts.MARKED_AS_FAILED}`);
    console.log(`   - No Changes: ${actionCounts.NO_CHANGES}`);
    console.log('===============================\n');
  }
};
